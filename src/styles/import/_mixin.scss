@use './variable' as var;

$breakpoints: (
  'mobile': 600,
  'tablet': 834,
  'desktop': var.$pc-width
) !default;

@mixin mq($mq, $bp1: tablet, $bp2: desktop) {
  $w1: map-get($breakpoints, $bp1);
  $w2: map-get($breakpoints, $bp2);
  $min1: 'min-width: #{convert-em($w1, 1)}';
  $min2: 'min-width: #{convert-em($w1, 1)}';
  $max1: 'max-width: #{convert-em($w1)}';
  $max2: 'max-width: #{convert-em($w2)}';

  @if $mq==min {
    @media ($min1) {
      @content;
    }
  } @else if $mq==max {
    @media ($max1) {
      @content;
    }
  } @else if $mq==min-max {
    @media ($min2) and ($max2) {
      @content;
    }
  }
}

/*
 * pxからemに変換
 */

@function convert-em($width, $ge: 0) {
  $result: $width + $ge;
  @return '#{calc($result * 0.0625)}em';
}

/*
 * 汎用計算用関数
 */

@function vw_pc($size) {
  @return calc($size / var.$pc-width) * 100vw;
}

@function vw_sp($size) {
  @return calc($size / var.$sp-width) * 100vw;
}

@function per($size, $base) {
  @return calc($size / $base) * 100%;
}

@function min_vw_pc($size) {
  @return min(vw_pc($size), $size * 1px);
}

@function max_vw_pc($size) {
  @return max(vw_pc($size), $size * 1px);
}

@function em($size, $base: var.$font-size-pc) {
  @return calc($size / $base) * 1em;
}

@function rem($size) {
  @return calc($size / var.$font-size-pc) * 1rem;
}

/*
 * line-height-crop
 */

@mixin line-height-crop($line-height) {
  line-height: $line-height;

  &::before {
    display: block;
    width: 0;
    height: 0;
    margin-top: calc((1 - #{$line-height}) * 0.5em);
    content: '';
    position: relative;
    z-index: -1;
  }
  &::after {
    display: block;
    width: 0;
    height: 0;
    margin-bottom: calc((1 - #{$line-height}) * 0.5em);
    content: '';
    position: relative;
    z-index: -1;
  }
}

/*
 * hover有効時
 */

@mixin hover() {
  @media (hover: hover) {
    &:where(:any-link, :enabled, summary):hover {
      @content;
    }
  }
}

@mixin group-hover {
  @media (hover: hover) {
    &:is(:where(:any-link, :enabled, summary):hover *) {
      @content;
    }
  }
}

/*
 * 行数制限
 */

@mixin line-clamp($row) {
  display: -webkit-box;
  -webkit-line-clamp: $row;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

/*
 * 疑似要素
 */

@mixin pseudo {
  display: block;
  content: '';
}
