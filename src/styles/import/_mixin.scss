@use 'sass:map';
@use './variable' as *;

/*
 * メディアクエリ
 */
$breakpoints: (
  'sm': 640,
  'md': 768,
  '900': 900,
  'lg': 1024,
  'xl': 1280,
  'xxl': 1440,
  'xxxl': 1920
) !default;

@mixin mq($mq, $bp1: tablet, $bp2: desktop) {
  $w1: map.get($breakpoints, $bp1);
  $w2: map.get($breakpoints, $bp2);
  $min1: 'min-width: #{convert-em($w1, 1)}';
  $min2: 'min-width: #{convert-em($w1, 1)}';
  $max1: 'max-width: #{convert-em($w1)}';
  $max2: 'max-width: #{convert-em($w2)}';

  // min
  @if $mq == min {
    @media ($min1) {
      @content;
    }
  }

  // max
  @else if $mq == max {
    @media ($max1) {
      @content;
    }
  }

  // min-max
  @else if $mq == min-max {
    @media ($min2) and ($max2) {
      @content;
    }
  }
}

@function convert-em($width, $ge: 0) {
  $result: $width + $ge;

  @return '#{calc($result * 0.0625)}em';
}

/*
 * functions
 */
@function vw_pc($size) {
  @return calc(calc($size / var(--width-pc)) * 100vw);
}

@function vh_pc($size) {
  @return calc(calc($size / var(--height-pc)) * 100vh);
}

@function vw_sp($size) {
  @return calc(calc($size / var(--width-sp)) * 100vw);
}

@function per($size, $base) {
  @return calc($size / $base) * 100%;
}

@function min_vw_pc($size) {
  @return min(vw_pc($size), $size * 1px);
}

@function max_vw_pc($size) {
  @return max(vw_pc($size), $size * 1px);
}

@function min_vw_sp($size) {
  @return min(vw_sp($size), $size * 1px);
}

@function min_vh_pc($size) {
  @return min(vh_pc($size), $size * 1px);
}

@function px($size) {
  @return calc($size * 1px);
}

/*
 * hover有効時
 */
@mixin hover() {
  @media (any-hover: hover) {
    &:where(:any-link, :enabled, summary):hover,
    &:where(:any-link, :enabled, summary):focus-visible {
      @content;
    }
  }
}

@mixin group-hover {
  @media (any-hover: hover) {
    &:is(:where(:any-link, :enabled, summary):hover *),
    &:is(:where(:any-link, :enabled, summary):focus-visible *) {
      @content;
    }
  }
}

/*
 * 行数制限
 */
@mixin line-clamp($row) {
  display: -webkit-box;
  overflow: hidden;
  -webkit-line-clamp: $row;
  -webkit-box-orient: block-axis;
}

/*
 * ハーフ・レディングの打ち消し
 */
@mixin leading-trim($line-height) {
  line-height: $line-height;

  &::before,
  &::after {
    display: block flow;
    inline-size: 0;
    block-size: 1px;
    content: '';
  }

  &::before {
    margin-block-end: var(--leading-trim);
  }

  &::after {
    margin-block-start: var(--leading-trim);
  }
}

/*
 * lang
 */
@mixin isJA() {
  :global([lang='ja']) {
    @content;
  }
}

@mixin isEN() {
  :global([lang='en']) {
    @content;
  }
}
